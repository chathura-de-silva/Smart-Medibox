[
    {
        "id": "204ec4eb1b6e858f",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2d391d07cfdc5971",
        "type": "mqtt in",
        "z": "204ec4eb1b6e858f",
        "name": "MQTT IN",
        "topic": "MEDIBOX_DATA",
        "qos": "2",
        "datatype": "json",
        "broker": "e794870d45f595e7",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 460,
        "wires": [
            [
                "68725ca1d147b853"
            ]
        ]
    },
    {
        "id": "638d591fbf1a2c34",
        "type": "debug",
        "z": "204ec4eb1b6e858f",
        "name": "debug incoming data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 500,
        "wires": []
    },
    {
        "id": "760f21ebc2564116",
        "type": "ui_gauge",
        "z": "204ec4eb1b6e858f",
        "name": "Light Intensity Gauge",
        "group": "d4ac752d0c0c9669",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Realtime",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "1",
        "colors": [
            "#e6e600",
            "#00b500",
            "#ca3838"
        ],
        "seg1": "0.33",
        "seg2": "0.66",
        "diff": false,
        "className": "",
        "x": 920,
        "y": 440,
        "wires": []
    },
    {
        "id": "34bf7ab87ca0f0d6",
        "type": "function",
        "z": "204ec4eb1b6e858f",
        "name": "max_light()",
        "func": "let ldr1 = parseFloat(msg.payload[\"LDR1\"]);\nlet ldr2 = parseFloat(msg.payload[\"LDR2\"]);\nlet range = 4095;\nlet maxLight;\nlet highLDR;\n\nif (!isNaN(ldr1) && !isNaN(ldr2)) {\n    if (ldr1 > ldr2) {\n        maxLight = (ldr1 / range).toFixed(2);\n        highLDR =  'LDR 1';    \n    } else {\n        maxLight = (ldr2 / range).toFixed(2);\n        highLDR =  'LDR 2'; \n    }\n    global.set(\"maxLight\",maxLight);\n    global.set(\"highLDR\",highLDR);\n     return { payload: maxLight, high: highLDR };\n} else {\n    return { payload: -1,high: 'No Data!'  };\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 460,
        "wires": [
            [
                "66756c8f418a4b90",
                "a6fb0296cd6faa64"
            ]
        ]
    },
    {
        "id": "fc435d12e5e4d7cc",
        "type": "ui_chart",
        "z": "204ec4eb1b6e858f",
        "name": "Light Intensity Plot",
        "group": "d4ac752d0c0c9669",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "Last 15 Minutes",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "cubic",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "15",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1110,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "627a4e470995c6a8",
        "type": "ui_toast",
        "z": "204ec4eb1b6e858f",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Error Fetching Light Data!",
        "x": 930,
        "y": 380,
        "wires": []
    },
    {
        "id": "66756c8f418a4b90",
        "type": "switch",
        "z": "204ec4eb1b6e858f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "-1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 460,
        "wires": [
            [
                "627a4e470995c6a8",
                "638d591fbf1a2c34"
            ],
            [
                "638d591fbf1a2c34",
                "0f6d7352543fb225",
                "760f21ebc2564116",
                "13e9ce3b200f7b50"
            ]
        ]
    },
    {
        "id": "68725ca1d147b853",
        "type": "delay",
        "z": "204ec4eb1b6e858f",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "2",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 330,
        "y": 460,
        "wires": [
            [
                "34bf7ab87ca0f0d6",
                "f5862481c7114cd5"
            ]
        ]
    },
    {
        "id": "0a92c3f0856bf456",
        "type": "ui_gauge",
        "z": "204ec4eb1b6e858f",
        "name": "Temperature Gauge",
        "group": "505c7b7f55a8a63e",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Realtime",
        "label": "Celcius",
        "format": "{{value}}",
        "min": 0,
        "max": "40",
        "colors": [
            "#287be6",
            "#04e600",
            "#ca3838"
        ],
        "seg1": "26",
        "seg2": "32",
        "diff": false,
        "className": "",
        "x": 920,
        "y": 160,
        "wires": []
    },
    {
        "id": "f5862481c7114cd5",
        "type": "function",
        "z": "204ec4eb1b6e858f",
        "name": "Temperature()",
        "func": "\nreturn {payload: parseFloat(msg.payload[\"Temperature\"]).toFixed(2)};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 180,
        "wires": [
            [
                "f8aff72470f1a620"
            ]
        ]
    },
    {
        "id": "0f6d7352543fb225",
        "type": "delay",
        "z": "204ec4eb1b6e858f",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "6",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 890,
        "y": 100,
        "wires": [
            [
                "fc435d12e5e4d7cc"
            ]
        ]
    },
    {
        "id": "d0b79e475de8e03b",
        "type": "delay",
        "z": "204ec4eb1b6e858f",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 890,
        "y": 220,
        "wires": [
            [
                "7050a334f4570b8c"
            ]
        ]
    },
    {
        "id": "7050a334f4570b8c",
        "type": "ui_chart",
        "z": "204ec4eb1b6e858f",
        "name": "Temperature Plot",
        "group": "505c7b7f55a8a63e",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Last Hour",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "cubic",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1110,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "f8aff72470f1a620",
        "type": "switch",
        "z": "204ec4eb1b6e858f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 180,
        "wires": [
            [
                "0a92c3f0856bf456",
                "d0b79e475de8e03b"
            ],
            [
                "a733fabd5e12204f"
            ]
        ]
    },
    {
        "id": "a733fabd5e12204f",
        "type": "ui_toast",
        "z": "204ec4eb1b6e858f",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Error Fetching Temperature Data!",
        "x": 960,
        "y": 280,
        "wires": []
    },
    {
        "id": "a6fb0296cd6faa64",
        "type": "ui_text",
        "z": "204ec4eb1b6e858f",
        "group": "d4ac752d0c0c9669",
        "order": 3,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Source : ",
        "format": "{{msg.high}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 880,
        "y": 340,
        "wires": []
    },
    {
        "id": "d27f94a9f9247bf4",
        "type": "ui_slider",
        "z": "204ec4eb1b6e858f",
        "name": "Min Angle Slider",
        "label": "Minimum Angle",
        "tooltip": "",
        "group": "59cb6c35f86cce23",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "min": 0,
        "max": "180",
        "step": "1",
        "className": "",
        "x": 480,
        "y": 740,
        "wires": [
            [
                "e3d8fd43a309635e"
            ]
        ]
    },
    {
        "id": "b1d3fdd44f2b9bfd",
        "type": "ui_slider",
        "z": "204ec4eb1b6e858f",
        "name": "Control Factor Slider",
        "label": "Control Factor",
        "tooltip": "",
        "group": "59cb6c35f86cce23",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "min": 0,
        "max": "1",
        "step": "0.01",
        "className": "",
        "x": 480,
        "y": 820,
        "wires": [
            [
                "389fcffd6fe37856"
            ]
        ]
    },
    {
        "id": "a58d6bd6202933fc",
        "type": "mqtt out",
        "z": "204ec4eb1b6e858f",
        "name": "MQTT OUT",
        "topic": "MEDIBOX_MOTOR_DATA",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e794870d45f595e7",
        "x": 1130,
        "y": 760,
        "wires": []
    },
    {
        "id": "ab981328c34e3e3a",
        "type": "function",
        "z": "204ec4eb1b6e858f",
        "name": "calculateAngle()",
        "func": "let minAngle = parseFloat(flow.get(\"minAngle\"));\nlet controlFactor = parseFloat(flow.get(\"controlFactor\"));\nlet medicineType = parseInt(flow.get(\"medicineType\"));\nlet maxLight = parseFloat(global.get(\"maxLight\"));\nlet higherLDR = global.get(\"highLDR\");\nlet constD;\nlet angle;\n\nif (higherLDR === \"LDR 1\"){\n        constD = 1.5;\n    }\nelse{\n        constD = 0.5;\n    }\nangle = Math.round(Math.min(minAngle*constD+(180-minAngle)*maxLight*controlFactor,180));\nreturn {payload:angle};\n// return {a:minAngle,b:controlFactor,c:medicineType,d:maxLight,e:higherLDR,f:angle,g:constD}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 820,
        "wires": [
            [
                "a58d6bd6202933fc",
                "3afef9ec6610c4b8"
            ]
        ]
    },
    {
        "id": "691ccc42e3bb5ba0",
        "type": "ui_dropdown",
        "z": "204ec4eb1b6e858f",
        "name": "Medicine Type Dropdown",
        "label": "Select the Medicine Type",
        "tooltip": "",
        "place": "Select option",
        "group": "59cb6c35f86cce23",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Custom",
                "value": 1,
                "type": "num"
            },
            {
                "label": "Type A",
                "value": 2,
                "type": "num"
            },
            {
                "label": "Type B",
                "value": 3,
                "type": "num"
            },
            {
                "label": "Type C",
                "value": 4,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 470,
        "y": 920,
        "wires": [
            [
                "ebb0835d65de8d59"
            ]
        ]
    },
    {
        "id": "3afef9ec6610c4b8",
        "type": "debug",
        "z": "204ec4eb1b6e858f",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 880,
        "wires": []
    },
    {
        "id": "13e9ce3b200f7b50",
        "type": "trigger",
        "z": "204ec4eb1b6e858f",
        "name": "Default Starting Parameters Trigger",
        "op1": "{\"minAngle\":30,\"controlFactor\":0.75,\"medicineType\":1}",
        "op2": "0",
        "op1type": "json",
        "op2type": "str",
        "duration": "0",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 220,
        "y": 620,
        "wires": [
            [
                "bfef9050d10c9b42",
                "2baf1b0198b040c4",
                "d0cb902f81cef7cb"
            ]
        ],
        "info": "Sends degault values and triggers starting of sending angles to the medibox.\r\nThis trigger activates when the light data is ready."
    },
    {
        "id": "bfef9050d10c9b42",
        "type": "function",
        "z": "204ec4eb1b6e858f",
        "name": "filterMinAngle()",
        "func": "return { payload: msg.payload[\"minAngle\"] };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 740,
        "wires": [
            [
                "d27f94a9f9247bf4"
            ]
        ]
    },
    {
        "id": "2baf1b0198b040c4",
        "type": "function",
        "z": "204ec4eb1b6e858f",
        "name": "filterControlFactor()",
        "func": "\nreturn {payload:msg.payload[\"controlFactor\"]};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 820,
        "wires": [
            [
                "b1d3fdd44f2b9bfd"
            ]
        ]
    },
    {
        "id": "d0cb902f81cef7cb",
        "type": "function",
        "z": "204ec4eb1b6e858f",
        "name": "filterMedType()",
        "func": "return {payload: msg.payload[\"medicineType\"]};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 920,
        "wires": [
            [
                "691ccc42e3bb5ba0"
            ]
        ]
    },
    {
        "id": "e3d8fd43a309635e",
        "type": "function",
        "z": "204ec4eb1b6e858f",
        "name": "helper()",
        "func": "flow.set(\"minAngle\",msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 740,
        "wires": [
            [
                "ab981328c34e3e3a"
            ]
        ]
    },
    {
        "id": "389fcffd6fe37856",
        "type": "function",
        "z": "204ec4eb1b6e858f",
        "name": "helper()",
        "func": "flow.set(\"controlFactor\",msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 820,
        "wires": [
            [
                "ab981328c34e3e3a"
            ]
        ]
    },
    {
        "id": "ebb0835d65de8d59",
        "type": "function",
        "z": "204ec4eb1b6e858f",
        "name": "helper()",
        "func": "flow.set(\"medicineType\",msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 920,
        "wires": [
            [
                "ab981328c34e3e3a"
            ]
        ]
    },
    {
        "id": "0dface8ebc5d8102",
        "type": "ui_spacer",
        "z": "204ec4eb1b6e858f",
        "name": "spacer",
        "group": "d4ac752d0c0c9669",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "92ec31f57b315727",
        "type": "ui_spacer",
        "z": "204ec4eb1b6e858f",
        "name": "spacer",
        "group": "d4ac752d0c0c9669",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "4ac5124f07c78fb9",
        "type": "ui_spacer",
        "z": "204ec4eb1b6e858f",
        "name": "spacer",
        "group": "505c7b7f55a8a63e",
        "order": 2,
        "width": 8,
        "height": 1
    },
    {
        "id": "e794870d45f595e7",
        "type": "mqtt-broker",
        "name": "Mosquitto Server",
        "broker": "https://test.mosquitto.org/",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "d4ac752d0c0c9669",
        "type": "ui_group",
        "name": "Maximum Light Intensity",
        "tab": "5285bdb0b95877f9",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "505c7b7f55a8a63e",
        "type": "ui_group",
        "name": "Temperature",
        "tab": "5285bdb0b95877f9",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "59cb6c35f86cce23",
        "type": "ui_group",
        "name": "Slider Settings",
        "tab": "fdb57b529356aa4d",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "5285bdb0b95877f9",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "fdb57b529356aa4d",
        "type": "ui_tab",
        "name": "Settings",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    }
]